

package core;

import core.dbTblModelProcess.DbTypeConverter;
import core.dbTblModelProcess.DbTblModel;
import core.dbTblModelProcess.DbTblModelClassAnnotationProcessor;
import core.dbTblModelProcess.IncorrectModelException;
import core.sqlQueries.createTableSqlQuery;
import core.sqlQueries.deleteSqlQuery;
import core.sqlQueries.insertSqlQuery;
import core.sqlQueries.selectAllSqlQuery;
import core.sqlQueries.selectByKeySqlQuery;
import core.sqlQueries.sqlQuery;
import core.sqlQueries.updateSqlQuery;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Горецкий Антон
 */
public class ReflectionJdbcDaoImpl<T> implements ReflectionJdbcDao<T> {
    
    private final Connection connection;
    private final Class<T> typeClass;
    private final DbTblModelClassAnnotationProcessor classProcessor; 
                        
    /**
     * Конструктор класса
     * @param typeClass тип класса, с экземлярами которого будет работать DAO
     * @param connection 
     * @param dbTypeConverter конвертер Java типов в типы данных БД
     * @throws core.dbTblModelProcess.IncorrectModelException
     */
    public ReflectionJdbcDaoImpl(Class<T> typeClass, Connection connection, DbTypeConverter dbTypeConverter) throws IncorrectModelException
    {
        this.connection = connection;
        this.typeClass = typeClass;
        classProcessor = 
                new DbTblModelClassAnnotationProcessor(typeClass,dbTypeConverter);
    }
    
    /**
     * Создание таблицы в БД по модели обьекта
     * @param object обьект модель которого будет использована
     */
    public void createTable(T object)
    {
        if(object == null)
            return;
        PreparedStatement pm = null;
        try
        {
            DbTblModel tblModel = classProcessor.getTableModel();
            sqlQuery Query = new createTableSqlQuery(tblModel);
            String strQuery = Query.getSQL();
            pm = connection.prepareStatement(strQuery);
            pm.execute();
        }
        catch(SQLException ex)
        {
            Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
        } 
        finally
        {
            if(pm != null)
                try {
                    pm.close();
            } catch (SQLException ex) {
                Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
   
    @Override
    public void insert(T object) {
        if(object == null)
            return;
        PreparedStatement pm = null;
        try
        {
            String tableName = classProcessor.getTableName();
            DatabaseMetaData metadata = connection.getMetaData();
            ResultSet resultSet;
            resultSet = metadata.getTables(null, null, tableName.toUpperCase(), null);
            if(!resultSet.next()){
              createTable(object);
            }
            Map<String,String> keyValues = classProcessor.getColumnValuesFromObject(object);
            sqlQuery Query = new insertSqlQuery(tableName,keyValues);
            String strQuery = Query.getSQL();
            pm = connection.prepareStatement(strQuery,Statement.RETURN_GENERATED_KEYS);
            pm.executeUpdate();
            ResultSet rsInsert = pm.getGeneratedKeys();
            if(rsInsert != null && rsInsert.next()){
                if(rsInsert.getMetaData().getColumnCount() > 0)
                {
                    Integer autoGeneratedValue = rsInsert.getInt(1);
                    classProcessor.setAutoIncrementedValueToObject(object,autoGeneratedValue);
                }
            }
        }
        catch(IllegalAccessException | SQLException ex)
        {
            Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
        } 
        finally
        {
            if(pm != null)
                try {
                    pm.close();
            } catch (SQLException ex) {
                Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    @Override
    public void update(T object) {
        if(object == null)
            return;
        PreparedStatement pm = null;
        try
        {
            String tableName = classProcessor.getTableName();
            Map<String,String> primaryKeys = classProcessor.getPrimaryKeysFromObject(object);
            if(primaryKeys.size() > 0)
            {
                Map<String,String> keyValues = classProcessor.getColumnValuesFromObject(object);
                sqlQuery Query = new updateSqlQuery(tableName, primaryKeys,keyValues);
                String strQuery = Query.getSQL();
                pm = connection.prepareStatement(strQuery);
                pm.executeUpdate();
            }
        }
        catch(IllegalAccessException | SQLException ex)
        {
            Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
        } 
        finally
        {
            if(pm != null)
                try {
                    pm.close();
            } catch (SQLException ex) {
                Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    @Override
    public void deleteByKey(T key) {
        if(key == null)
            return;
        PreparedStatement pm = null;
        try
        {
            String tableName = classProcessor.getTableName();
            Map<String,String> primaryKeys = classProcessor.getPrimaryKeysFromObject(key);
            if(primaryKeys.size() > 0)
            {
                sqlQuery Query = new deleteSqlQuery(tableName, primaryKeys);
                String strQuery = Query.getSQL();
                pm = connection.prepareStatement(strQuery);
                pm.executeUpdate();
            }
        }
        catch(IllegalAccessException | SQLException ex)
        {
            Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
        } 
        finally
        {
            if(pm != null)
                try {
                    pm.close();
            } catch (SQLException ex) {
                Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    @Override
    public T selectByKey(T key) {
        if(key == null)
            return null;
        Statement statement = null;
        try
        {
            String tableName = classProcessor.getTableName();
            Map<String,String> primaryKeys = classProcessor.getPrimaryKeysFromObject(key);
            if(primaryKeys.size() > 0)
            {
                sqlQuery Query = new selectByKeySqlQuery(tableName, primaryKeys);
                String strQuery = Query.getSQL();
                statement = connection.createStatement();
                ResultSet rs = statement.executeQuery(strQuery);
                if(rs != null && rs.next())
                {
                   ResultSetMetaData meta =  rs.getMetaData();
                   int count =  meta.getColumnCount();
                   Map<String,Object> map = new HashMap<>();
                   for(int i =1;i<=count;i++)
                   {
                       String columnName = meta.getColumnName(i);
                       Object value = rs.getObject(i);
                       map.put(columnName,value);
                   }
                   classProcessor.setValuesToObject(map, key);
                   return key;
                }
            }
        }
        catch(IllegalAccessException | SQLException ex)
        {
            Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
        } 
        finally
        {
            if(statement != null)
            {
                try {
                    statement.close();
                } catch (SQLException ex) {
                    Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        return null;
    }

    @Override
    public List<T> selectAll() {
        Statement statement = null;
        try
        {
            String tableName = classProcessor.getTableName();
            sqlQuery Query = new selectAllSqlQuery(tableName);
            String strQuery = Query.getSQL();
            statement = connection.createStatement();
            ResultSet rs = statement.executeQuery(strQuery);
            List<T> list = new ArrayList<>();
            ResultSetMetaData meta =  rs.getMetaData();
            int count =  meta.getColumnCount();
            T item;
            while(rs.next())
            {
                item = (T) typeClass.newInstance();
                if(item == null)
                    return null;
                Map<String,Object> map = new HashMap<>();
                for(int i =1;i<=count;i++)
                {
                    String columnName = meta.getColumnName(i);
                    Object value = rs.getObject(i);
                    map.put(columnName,value);
                }
                classProcessor.setValuesToObject(map, item);
                list.add(item);
            }
            return list;
        }
        catch(IllegalAccessException | SQLException | InstantiationException ex)
        {
            Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
        } 
        finally
        {
            if(statement != null)
            {
                try {
                    statement.close();
                } catch (SQLException ex) {
                    Logger.getLogger(ReflectionJdbcDaoImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        return null;
    }
}
